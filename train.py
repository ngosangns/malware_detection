import os
import sys
import tqdm
import numpy as np
import pandas as pd
from tensorflow.keras import optimizers
from tensorflow.keras.models import Sequential
from tensorflow.keras.metrics import binary_accuracy
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.layers import Dense, Conv1D, Flatten, MaxPooling1D, Dropout, Activation

# cnn input: csv_file_path, training_epochs
if __name__ == "__main__":
    # read data file
    data = pd.read_csv(str(sys.argv[1]), sep=',')
    # dataset
    X = np.array(data.drop(['FilePath', 'legitimate'], axis=1).values)
    y = np.array(data['legitimate'].values)
    y = np.array([np.absolute(y-1), y]).T
    n = X.shape[1]
    for i in range(X.shape[1]):
        temp = X[:, i]
        X[:, i] = (temp-min(temp))/(max(temp)-min(temp))
    X = X.reshape(X.shape[0], X.shape[1], 1)
    # model
    model = Sequential()
    model.add(Conv1D(64, 3, padding='same', input_shape=(X.shape[1:]), activation='relu'))
    model.add(Conv1D(32, 3, activation='relu'))
    model.add(MaxPooling1D(pool_size=2))
    model.add(Conv1D(64, 3, padding='same', activation='relu'))
    model.add(Conv1D(64, 3, activation='relu'))
    model.add(MaxPooling1D(pool_size=2))
    model.add(Flatten())
    model.add(Dense(512, activation='sigmoid'))
    model.add(Dense(512, activation='sigmoid'))
    model.add(Dense(512, activation='sigmoid'))
    model.add(Dense(  2, activation='sigmoid'))
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['binary_accuracy'])
    # checkpoint
    os.mkdir("trained")
    filepath="trained/epoch-{epoch:05d}-acc-{binary_accuracy:.4f}.hdf5"
    checkpoint = ModelCheckpoint(filepath, monitor='binary_accuracy', verbose=1, save_best_only=True, mode='max')
    callbacks_list = [checkpoint]
    # run/train model
    model.fit(X, y, epochs=int(sys.argv[2]), batch_size=512, callbacks=callbacks_list, verbose=0)